
/*
 * Description: Wrapper of the urbi Socket class, sending event on each received line.
 *
 * The basic Urbiscript Socket class does not fit Irc needs,
 * on poll, you get a block of text composed of every chars since last poll.
 * In fact, you may be polling while receiving data.
 *
 * UrSocket listen to a Socket and emit an event every time a string terminated by \n or \r\n is received.
 * Every IRC server message now get's his own event.
 *
 * This class have to provide the same interface as Socket
 */
class UrIRC.UrSocket {
	// Logger class, debug and monitoring purpose.
	var log = Logger.new("UrSocket");

	// the Socket standard object
	var client = nil;

	// previous poll not terminated message 
	var line_rest = nil;

	// This event is emitted on every server message
	var received = Event.new; // out

	// Socket.poll every pollTime
	// Have to be higher than the message processing time of your application
	var pollTime = 500ms;

	// just create a new Socket
	function init() {
		client = Socket.new;
	};
	
	// declare Socket.received watchdog, error watchdog, Socket regular poll and Socket connect
	function connect(server, port) {
		// error handling
		at (client.disconnected?) 	{log.err << "UrSocket : client disconnected"};
		at (client.error?)		{log.err << "UrSocket : client error"};
		
		// define callback on data poll
		at (client.received?(var msg)) {	

			// log received message
			log.debug << "UrSocket received : " + msg;

			// append last cutted line if exists
			var data = {if (line_rest != nil) {line_rest + msg} else msg;}|
			
			// split multiline messages
			var lines = data.split(["\r\n", "\n"])|
			
			// get last message (empty if newline-terminated) and save if non empty
			// note : assert{"1\n".split() == ["1", ""]};
			var last = lines.removeBack|
			line_rest = {if (last != "") last else nil;}|

			// send an event for each message
			for (var line : lines) {received!(line)};
		};
		
		// connect the real socket
		client.connect(server, port);
	};

	// send a message through the real socket
	function write(msg) {
		client.write(msg)
	};
};
