
requireFile("UrSocket.u");
requireFile("plugins/UrChan.u");
requireFile("plugins/UrPong.u");
requireFile("plugins/UrEventDispatcher.u");

// bot class
class UrBot {
	var log = Logger.new("UrBot");

	var send = Event.new; // in
	var recv = Event.new; // out

	var client = nil;
	var server = nil;
	var port = nil;
	var nick = nil;
	var chans = nil;


	function init(server_url, port_nb, nickname) {
		// init object vars
		server = server_url|
		port = port_nb|
		nick = nickname|
		client = UrSocket.new|
		chans = Dictionary.new|

		// send command handler
		at (send?(var msgs)) {
			for| (var msg : msgs)
				write(msg);
		};

		// ==== start core plugins
		// handle socket messages and emit meaningfull events
		UrEventDispatcher.new(this).load;
		// answer pong to ping
		UrPong.new(this).load;
	};
	
	// connection function
	function connect() {
		// connect action
		client.connect(server, port);
		write("USER urbot uurbot uuurbot : UrBot");
		write("NICK " + nick);
	};

	// private write function
	function write(msg) {
		log.err << msg;
		client.write(msg + "\n");
	};

	function asString() {
		"Urbot : [%s@%s:%s]" % [nick,server,port]; 
	};

	function addChan(name) {
		if (!chans.has(name.toLower)) {
			var chan = UrChan.new(this, name.toLower)|
			chans[chan.name] = chan|
			chan.join;
		};
	};

	function getChan(name) {	
		if (chans.has(name.toLower)) 
			chans[name.toLower]
		else 
			nil;
	};

};


// allow UrChan.new inside UrBot class
UrBot.setSlot("UrChan", UrChan);

// allow UrSocket.new inside UrBot class
UrBot.setSlot("UrSocket", UrSocket);

// allow UrPong.new inside UrBot class
UrBot.setSlot("UrPong", UrPong);

// allow UrEventDispatcher.new inside UrBot class
UrBot.setSlot("UrEventDispatcher", UrEventDispatcher);
