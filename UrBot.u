
requireFile("UrSocket.u");
requireFile("plugins/UrChan.u");
requireFile("plugins/UrUser.u");
requireFile("plugins/UrPong.u");
requireFile("plugins/UrEventDispatcher.u");

// bot class
class UrIRC.UrBot {
	
	var log = Logger.new("UrBot");

	var send = Event.new; // in
	var recv = Event.new; // out

	var client = nil;
	var server = nil;
	var port = nil;
	var nick = nil;
	
	var chans = nil;
	var users = nil;

	function init(server_url, port_nb, nickname) {
		// init object vars
		server = server_url|
		port = port_nb|
		nick = nickname|
		client = UrIRC.UrSocket.new|
		chans = Dictionary.new|
		users = Dictionary.new|

		// send command handler
		at (send?(var msgs)) {
			for| (var msg : msgs)
				write(msg);
		};

		// ==== start core plugins
		// handle socket messages and emit meaningfull events
		UrIRC.UrEventDispatcher.new(this).load;
		// answer pong to ping
		UrIRC.UrPong.new(this).load;
	};
	
	// connection function
	function connect() {
		// connect action
		client.connect(server, port);
		write("USER urbot uurbot uuurbot : UrBot");
		write("NICK " + nick);
	};

	// private write function
	function write(msg) {
		log.err << msg;
		client.write(msg + "\n");
	};

	function asString() {
		"Urbot : [%s@%s:%s]" % [nick,server,port]; 
	};

	function getChan(name) {	
		if (chans.has(name.toLower)) {
			chans[name.toLower]
		} else { 	
			var chan = UrIRC.UrChan.new(this, name.toLower)|
			chans[chan.name] = chan|
			chan.join;
			chan;
		};
	};

	function getUser(nick, loginServ = nil) {	
		// caller have loginServ 
		if (!loginServ.isNil) { 
			
			// user is already known
			if (users.has(loginServ.toLower)) {
				users[loginServ.toLower]
			
			// we don't know this user
			} else { 	
				var user = UrIRC.UrUser.new(this, nick, loginServ.toLower);
				users[user.loginServ] = user;
				user
			};
		
		// caller does not know loginServ
		} else {	
			// user is already known
			for| (var record : users) {
				if (record.second.nick == nick) return record.second;
			}; 

			// we don't know this user
			this.write("WHOIS " + nick);
			waituntil(this.recv?(var event, var captures) if 
				  (event == "whois_user" && (captures["nick"].toLower == nick.toLower)) // user found
				|| (event == "whois_nosuchnick" && (captures["nick"].toLower == nick.toLower)) // user not found	
			);
			if (event == "whois_user") {
				var user = UrIRC.UrUser.new(this, captures["nick"], captures["login"].toLower + "@" + captures["serv"].toLower);
				users[user.loginServ] = user;
				user
			} else {
				nil
			};
		};
	};
};


