
requireFile("UrSocket.u");
requireFile("plugins/UrChan.u");
requireFile("plugins/UrUser.u");
requireFile("plugins/UrPong.u");
requireFile("plugins/UrEventDispatcher.u");

/*
This class holds all shared objects and methods of the UrIRC lib.
This is the main object.

You should read the comments of this class before writing any plugin.
*/
class UrIRC.UrBot {
	
	// main logger 
	var log = Logger.new("UrBot");

	/*
	 * recv is the main and only event while handling server messages
	 * the UrEventDispatcher plugin listen the socket and emit recv event on known server messages
	 * format  : <event_name:String>, <payload:Dictionary>
	 * example : recv!("chan_msg", ["nick"=>"MyNickname", "serv"=>"login@server", "chan"=>"#chan", "msg"=>"Hello world !"]);
	 * UrEvent Dispatcher doc provides you a list of available events.
	 */
	var recv = Event.new;

	// this UrSocket emit an event on each received line
	var client = nil;

	// server name String
	var server = nil;

	// server port (integer)
	var port = nil;

	// irc bot nickname
	var nick = nil;
	
	/* 
	 * Protected Dictionary holding the known chans as UrChan objects
	 * element : <chan_name:String> => <chan_object:UrChan>
	 * example : "#chan" => UrChan_0xffffffff
	 * In fact, each UrChan object already contains the chan name, but search is speeded up by this Dictionary index. 
	 * chan_name DOES have a sharp as first char, but you don't mind if you use UrBot.getChan
	 */
	var _chans = nil;
	
	/* 
	 * Protected Dictionary holding the known users as UrUser objects
	 * element : <user@host:String> => <user_object:UrUser>
	 * example : "jack@irc.host.com" => UrChan_0xffffffff
	 * In fact each UrChan object already contains the chan name, but search is speeded up by this Dictionary index. 
	 * acces via UrBot.getUser
	 */
	var _users = nil;

	/* 
	 * Constructor
	 * Create a UrSocket, and load the following core plugins 
	 * 	UrEventDispatcher  
	 * 		-> Listen UrSocket events and emit meaningfull recv events
	 * 	UrPong
	 * 		-> Automated answer to PING request
	 * @param String server_url : Url of the irc server. Ex: irc.iiens.net
	 * @param Float|integer port_nb : Server irc port. Float object are used to represent integers.
	 * @param String nickname : Bot nickname for this session.
	 * 
	 * Example : 
	 * 	var bot = UrIRC.UrBot.new("irc.iiens.net", 6667, "Urbot");
	 */
	function init(server_url, port_nb, nickname) {
		// init object vars
		server = server_url;
		port = port_nb;
		nick = nickname;
		client = UrIRC.UrSocket.new;
		_chans = Dictionary.new;
		_users = List.new;

		// ==== start core plugins
		// handle socket messages and emit meaningfull events
		UrIRC.UrEventDispatcher.new(this).load;
		// answer pong to ping
		UrIRC.UrPong.new(this).load;
	};
	
	/*
	 * Establish connection between this bot and the irc server
	 */
	function connect() {

		// socket connection start
		client.connect(server, port);
	
		// send irc commands
		send("USER urbot uurbot uuurbot : UrBot");
		send("NICK " + nick);
	};

	/*
	 * Send textual informations to the irc server, adding a \n at the end.
	 * @param String msg : This string will be send to the server, adding a \n at the end.
	 */
	function send(msg) {
		log.log << "SENDING : " + msg |
		client.write(msg + "\n");
	};

	/*
	 * Display usefull information instead of object address on serialization.
	 * @return String : UrBot summary.
	 */
	function asString() {
		"Urbot : [%s@%s:%s]" % [nick,server,port]; 
	};


	/*
	 * Return the UrChan object corresponding to the chan name.
	 * 	Does nothing else if this chan is already known.
	 * 	Create a new UrChan object and call his "join" slot if this chan is unknown. 
	 * This feature in pure OOP should be in a UrChanManager object.
	 * 
	 * @param String name : Irc chan name. Have to begin with a '#'.
	 * @return UrChan : The corresponding UrChan object.
	 */
	function getChan(name) {
		if (_chans.has(name.toLower)) {
			_chans[name.toLower]
		} else { 	
			var chan = UrIRC.UrChan.new(this, name.toLower)|
			_chans[chan.name] = chan|
			chan.start;
			chan;
		};
	};
	
	/*
	 * Return the UrUser object corresponding to the user nick name and/or user and host.
	 *
	 * Does nothing else if this user is already known.
	 *
	 * Important notes : 
	 * 	- If this user is unknown, and "loginAndHost" is NOT provided, this method will :
	 * 		1- search the known UrUser List and fail to find the good one
	 *		2- send a WHOIS command to the server
	 * 		3- wait for server reply
	 * 		4- create the corresponding UrUser if the server know this nick, nil if not.
	 * 		5- return this result
	 *	- If this user is unknown, and "loginAndHost" IS provided, this method will :
	 * 		1- search the known UrUser List and fail to find the good one
	 * 		2- create the corresponding UrUser.
	 * 		3- return the UrUser.
	 *
	 * This feature in pure OOP should be in a UrUserManager object.
	 * 
	 * @param String nick : User nick name.
	 * @param String loginAndHost : User login on host and host name serated by '@' (ex : "jack@irc.iiens.net")
	 * @return UrUser|nil : The corresponding UrUser object, nil if this nick doesn't correspond to a user on this server.
	 */
	function getUser(nick, loginAndHost = nil) {

		// caller provided userAndHost 
		if (!loginAndHost.isNil) { 
			// Dictionary key standardization
			loginAndHost = loginAndHost.toLower;
			
			// user already known \o/
			for| (var user : _users) {
				if (user.nick == nick && user.loginAndHost == loginAndHost) 
				return user;
			}; 
			
			// we don't know this user, but we can create it.
			// create the corresponding UrUser
			var user = UrIRC.UrUser.new(this, nick, loginAndHost);
			_users << user; // store it
			user	// and return it
		
		// caller does not know loginAndHost
		} else {	
			// but user is already known \o/
			for| (var user : _users) {
				if (user.nick == nick) return user;
			}; 

			// we don't know this user enough 
			// send a WHOIS command
			this.send("WHOIS " + nick);
	
			// wait server reply 
			waituntil(this.recv?(var event, var captures) if 
				// user found
				  (event == "whois_user" && (captures["nick"].toLower == nick.toLower)) 
				// user not found
				|| (event == "whois_nosuchnick" && (captures["nick"].toLower == nick.toLower)) 
			);

			// if this nick is known by this server
			if (event == "whois_user") {
				// create the corresponding UrUser
				var user = UrIRC.UrUser.new(this, captures["nick"], captures["user"].toLower + "@" + captures["host"].toLower);
				_users << user; // store it
				user	// and return it

			// nick unknown
			} else {
				nil
			};
		};
	};
};


