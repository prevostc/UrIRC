requireFile("UrIRC.u");
requireFile("UrPlugin.u");

class UrIRC.UrEventDispatcher : UrIRC.UrPlugin {

	var log = Logger.new("UrEventDispatcher");
	var match_map = nil;

        load = function() {
		
		loadMatchMap();

                // set socket messages handler on load
                at (bot.client.received?(var msg)) {
                        parse(msg);
                };
        };

	function loadMatchMap() {
		match_map = [
			["regexp" => "^PING (.+)$", "recv_code" => "ping", "captures" => ["payload"]],
			["regexp" => ":(.+?)!(.+?) PRIVMSG (#.+?) :(.+?)$", "recv_code" => "chan_msg", "captures" => ["nick", "serv", "chan", "msg"]],
			["regexp" => ":(.+?)!(.+?) JOIN :(#.+?)$", "recv_code" => "chan_join", "captures" => ["nick", "serv", "chan"]],
			["regexp" => ":(.+?)!(.+?) NICK (.+?)$", "recv_code" => "nick_change", "captures" => ["old_nick", "serv", "new_nick"]],
			[ // whois 311, contains user login, server and real name
				"regexp" => ":%s 311 %s (.+?) (.+?) (.+?) \\* :(.+?)$" % [bot.server, bot.nick], 
				"recv_code" => "whois_user", 
				"captures" => ["nick", "user", "host", "real_name"]
			],
			[ // whois 401, no such nick
				"regexp" => ":%s 401 %s (.+?) :(.+?)$" % [bot.server, bot.nick], 
				"recv_code" => "whois_nosuchnick", 
				"captures" => ["nick", "msg"]
			],
			[ // kick message
				"regexp" => ":(.+?)!(.+?) KICK (#.+?) (.+?) :(.+?)$", 
				"recv_code" => "kick", 
				"captures" => ["kicker", "serv", "chan", "kicked", "reason"]
			],
			[ // query
				"regexp" => ":(.+?)!(.+?) PRIVMSG %s :(.+?)$" % [bot.nick], 
				"recv_code" => "query", 
				"captures" => ["nick", "serv", "msg"]
			],
		];
	};

        // parse a server message and trigger the corresponding event
        function parse(msg) {
                // for each match
                for (var map : match_map) {
                        // create the regexp object
                        var re = Regexp.new(map["regexp"]);
                        if (re.match(msg)) {
                                // build the captures dictionnary
                                var captures = Dictionary.new;
                                for (var i = 0 ; i < map["captures"].size ; i+=1 )
                                        captures[map["captures"][i]] = re.matches[i+1];

                                log.log << "MATCHED MSG : " + map["recv_code"] + captures;

                                // emit the good event
                                bot.recv!(map["recv_code"], captures);
                                return true;
                        };
                };
               	log.err << "UNKNOWN MSG : " + msg;
        };
};


