

/*
 * This class listend to server messages and emit meaningfull events via Urbot.recv
 * It was designed in a particular way, handling every IRC messages is hard/impossible,
 * so we needed a flexible and scalable structure in which we are able to easily add matching cases
 */
class UrIRC.UrEventDispatcher : UrIRC.UrPlugin {

	// parsonal Logger, awesome !
	var log = Logger.new("UrEventDispatcher");

	/*
	 * List : server messages parsing data
	 * This data structure is very handy, it holds all matches data used by server message parsing.
	 * The full documentation of each recv events will be edited when this class will handle a large bunch of irc server messages.
	 * His structure is quite intuitive, feel free to dump it and find the perfect event for your task
	 * format : 
	 * 	List of "parsing data"
	 * 	Parsing data format (Dictionary) :
	 * 		"regexp" 	: if regexp match, UrBot.recv is emited
	 * 		"recv_code" 	: recv first argument, server message identifier
	 *		"captures"	: "regexp" may capture data, this List gives a name to each captures
	 *		"callbacks"	: Dictionary containing callbacks function for one or more capture name
	 *				  Format : <capture_name:String> => <callback:function(String)>
	 *				  Callbacks have to return a value, any type is accepted.
	 *
	 * example : 
	 * 	server message 	: "PING hello 42"
	 * 	parsing data 	: 	["regexp" 	=> "^PING (.+?) (.+?)$",
	 * 				"recv_code" 	=> "ping",
	 * 				"captures" 	=> ["word1", "word2"],
	 * 				"callbacks"	=> ["word2" => function(str){"world"}]]
	 * 	emitted event 	: recv!("ping", ["word1" => "hello", "word2" => "world"]);
	 *
	 * Notice: 
	 * By using Dictionaries, we get rid of the list order and give a meaning to each data.
	 */
	var match_map = nil;

	/*
	 * Load the match map data structure
	 * I hope some day these data will be taken from a database
	 */
	function loadMatchMap() {
		match_map = [
			[ // ping 
				"regexp" => "^PING (.+)$", 
				"recv_code" => "ping", 
				"captures" => ["payload"],
			],
			[ //chan message
				"regexp" => ":(.+?)!(.+?) PRIVMSG (#.+?) :(.+?)$", 
				"recv_code" => "chan_msg", 
				"captures" => ["nick", "serv", "chan", "msg"],
			],
			[ // chan join
				"regexp" => ":(.+?)!(.+?) JOIN :(#.+?)$", 
				"recv_code" => "chan_join", 
				"captures" => ["nick", "serv", "chan"],
			],
			[ // nick change
				"regexp" => ":(.+?)!(.+?) NICK (.+?)$", 
				"recv_code" => "nick_change", 
				"captures" => ["old_nick", "serv", "new_nick"],
			],
			[ // whois 311, contains user login, server and real name
				"regexp" => ":%s 311 %s (.+?) (.+?) (.+?) \\* :(.+?)$" % [bot.server, bot.nick], 
				"recv_code" => "whois_user", 
				"captures" => ["nick", "user", "host", "real_name"],
			],
			[ // whois 401, no such nick
				"regexp" => ":%s 401 %s (.+?) :(.+?)$" % [bot.server, bot.nick], 
				"recv_code" => "whois_nosuchnick", 
				"captures" => ["nick", "msg"],
			],
			[ // kick message
				"regexp" => ":(.+?)!(.+?) KICK (#.+?) (.+?) :(.+?)$", 
				"recv_code" => "kick", 
				"captures" => ["kicker", "serv", "chan", "kicked", "reason"],
			],
			[ // query
				"regexp" => ":(.+?)!(.+?) PRIVMSG %s :(.+?)$" % [bot.nick], 
				"recv_code" => "query", 
				"captures" => ["nick", "serv", "msg"],
			],
			[ // names reply
				"regexp" => ":%s 353 %s = (.*?) :(.*?)$" % [bot.server, bot.nick], 
				"recv_code" => "names", 
				"captures" => ["chan", "nicks"],
				"callbacks" => ["nicks" => UrIRC.UrUser.&stringToList],
			],
			[ // end of names
				"regexp" => ":%s 366 %s (.*?) .*$" % [bot.server, bot.nick], 
				"recv_code" => "names_end", 
				"captures" => ["chan"],
			],
		];
	};

	/*
	 * Load match map and start socket message watchdog.
	 */
        function start() {
		UrIRC.UrUser.slotNames;
		_jobs : {
			// load match data
			loadMatchMap();

			// set socket messages handler on load
			at (bot.client.received?(var msg)) {
				_parse(msg);
			};

		};
        };

        /*
	 * Parse a server message and trigger the corresponding event using match_map
	 * Match_map contains all the information, this method mix them together
	 */
        function _parse(msg) {

                // for each match
                for (var map : match_map) {

                        // create the regexp object
                        var re = Regexp.new(map["regexp"]);

			// match server message with regexp
                        if (re.match(msg)) {

                                // build the captures 
                                var captures = Dictionary.new;
                                for (var i = 0 ; i < map["captures"].size ; i+=1 ) {
					var current = map["captures"][i];
					if (map.has("callbacks") && map["callbacks"].has(current)) {
						var callback = map["callbacks"][current];
						captures[current] = callback(re.matches[i+1]);
					} else {
						captures[current] = re.matches[i+1];
					};
				};

				// debug message
                                log.log << "MATCHED MSG : " + map["recv_code"] + captures;

                                // emit the right event
                                bot.recv!(map["recv_code"], captures);
				
				// return, only one match/recv event by server message
				return true;
                        };
                };
               	log.err << "UNKNOWN MSG : " + msg;
        };
};


